lb <- c(-Inf, -Inf)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(1, 0)
Sigma <- matrix(c(1, .5, .5, 1), nrow = 2)
lb <- c(0, 0)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
source('~/Research/truncated-mvn-sampling/lcg_testing.R', echo=TRUE)
mu <- c(1, 0)
Sigma <- matrix(c(1, .9, .9, 1), nrow = 2)
lb <- c(0, 0)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
Sigma
mu <- c(1, 0)
Sigma <- matrix(c(1, .9, .9, 1), nrow = 2)
lb <- c(0, 0)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(1, 0)
Sigma <- matrix(c(1, 0, 0, 1), nrow = 2)
lb <- c(0, 0)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(1, 0)
Sigma <- matrix(c(1, -.99, -.99, 1), nrow = 2)
lb <- c(0, 0)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(1, 0)
Sigma <- matrix(c(1, -.2, -.2, 1), nrow = 2)
lb <- c(0, 0)
ub <- c(Inf, Inf)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(1, 0)
Sigma <- matrix(c(1, -.2, -.2, 1), nrow = 2)
lb <- c(-1, -1)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, -.2, -.2, 1), nrow = 2)
lb <- c(-1, -1)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, -.8, -.8, 1), nrow = 2)
lb <- c(-1, -1)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, -.9, -.9, 1), nrow = 2)
lb <- c(-1, -1)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, -.99, -.99, 1), nrow = 2)
lb <- c(-1, -1)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, -.99, -.99, 1), nrow = 2)
lb <- c(-2, -2)
ub <- c(2, 2)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .3, .3, 1), nrow = 2)
lb <- c(-2, -2)
ub <- c(2, 2)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .9, .9, 1), nrow = 2)
lb <- c(-2, -2)
ub <- c(2, 2)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .9, .9, 1), nrow = 2)
lb <- c(-3, -3)
ub <- c(3, 3)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .99, .99, 1), nrow = 2)
lb <- c(-3, -3)
ub <- c(3, 3)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .99, .99, 1), nrow = 2)
lb <- c(-4, -3)
ub <- c(4, 3)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .99, .99, 1), nrow = 2)
lb <- c(-4, -4)
ub <- c(4, 4)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .999, .999, 1), nrow = 2)
lb <- c(-4, -4)
ub <- c(4, 4)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
library(lincongauss)
mu <- c(0, 0)
Sigma <- matrix(c(1, .4, .4, 1), nrow = 2)
lb <- c(-4, -4)
ub <- c(4, 4)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
baz <- lincongauss::rtmvn(10000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
baz <- lincongauss::rtmvn(10000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
library(lincongauss)
mu <- c(0, 0)
Sigma <- matrix(c(1, .4, .4, 1), nrow = 2)
lb <- c(-4, -4)
ub <- c(4, 4)
baz <- lincongauss::rtmvn(10000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .8, .8, 1), nrow = 2)
lb <- c(-4, -4)
ub <- c(4, 4)
baz <- lincongauss::rtmvn(10000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
mu <- c(0, 0)
Sigma <- matrix(c(1, .8, .8, 1), nrow = 2)
lb <- c(-4, -4)
ub <- c(4, 4)
baz <- lincongauss::rtmvn(10000, mu, Sigma, lb, ub, c(.5, .5), mode = "intersection")
plot(baz)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(1, d))
d <- 1000
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(1, d))
samples[, 1]
hist(samples[, 1])
hist(samples[, 1], breaks = "FD")
d <- 2
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(1, d))
hist(samples[, 1], breaks = "FD")
d <- 100
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(1, d))
hist(samples[, 1], breaks = "FD")
exact_samples <- cdists::crtmvn(1000, Sigma, mu, lb, ub)
exact_samples
hist(exact_samples[, 1], breaks = "FD")
hist(exact_samples[, 100], breaks = "FD")
d <- 10
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(1, d))
hist(samples[, 1], breaks = "FD")
hist(exact_samples[, 100], breaks = "FD")
hist(samples[, 1], breaks = "FD")
dim(samples)
d <- 100
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(1, d))
hist(samples[, 1], breaks = "FD")
d <- 100
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(.1, d))
hist(samples[, 1], breaks = "FD")
d <- 100
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(.1, d))
hist(samples[, 1], breaks = "FD")
samples <- lincongauss::rtmvn(10000, mu, Sigma, lb, ub, rep(.1, d))
hist(samples[, 1], breaks = "FD")
hist(samples[seq(1, 10000, length.out = 100), 1], breaks = "FD")
hist(samples[seq(1, 10000, length.out = 1000), 1], breaks = "FD")
samples <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, rep(.1, d))
hist(samples[seq(1, 1000, length.out = 100), 1], breaks = "FD")
hist(samples[seq(1, 1000, length.out = 100), 2], breaks = "FD")
hist(samples[seq(1, 1000, length.out = 100), 3], breaks = "FD")
d <- 100
n <- 10000
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
samples <- lincongauss::rtmvn(n, mu, Sigma, lb, ub, rep(.1, d))
hist(samples[seq(1, n, length.out = 100), 3], breaks = "FD")
exact_samples <- cdists::crtmvn(1000, Sigma, mu, lb, ub)
hist(exact_samples[, 100], breaks = "FD")
coda::effectiveSize(samples)
hist(exact_samples[seq(1, n, length.out = 100), 100], breaks = "FD")
coda::effectiveSize(samples[seq(1, n, length.out = 100), ])
library(lincongauss)
library(lincongauss)
library(lincongauss)
library(lincongauss)
library(lincongauss)
install.packages("Rcpp")
install.packages("RcppArmadillo")
library(lincongauss)
library(lincongauss)
A <- matrix(1:6, byrow = TRUE, ncol = 2)
A
b <- c(1, 1, 1)
test_update_fix_shift(A, b, .5, 5)
lincongauss::test_update_fix_shift(A, b, .5, 5)
shiftvals <- c(1, 2, 5, 8, 9)
lincongauss::test_update_fix_shift(A, b, .5, 5, shiftvals)
eval
evaled
Rcpp::sourceCpp('tests/testing.cpp')
Rcpp::sourceCpp('tests/testing.cpp')
ls()
X <- matrix(c(-4, 1, 2, 3, 2, 3, -1, -1, 1), byrow = TRUE, nrow = 3, ncol = 3)
X
evaled <- evaluate(A, b, X)
b <- c(1, 1)
evaled <- evaluate(A, b, X)
b <- matrix(1, nrow =3)
evaled <- evaluate(A, b, X)
b <- rep(1, 3)
evaled <- evaluate(A, b, X)
X
shiftvals <- c(4, -5, 14)
lincongauss::test_update_fix_shift(A, b, .5, 5, shiftvals)
library(lincongauss)
A <- matrix(1:6, byrow = TRUE, ncol = 2)
b <- rep(1, 3)
X <- matrix(c(-4, 1, 2, 3, 2, 3, -1, -1, 1), byrow = TRUE, nrow = 3, ncol = 3)
shiftvals <- c(4, -5, 14)
lincongauss::test_update_fix_shift(A, b, .5, 5, shiftvals)
shiftvals <- c(4, -5, -14)
lincongauss::test_update_fix_shift(A, b, .5, 5, shiftvals)
shiftvals <- c(4, -5, -14)
lincongauss::test_update_fix_shift(A, b, .5, 5, shiftvals)
library(lincongauss)
A <- matrix(1:6, byrow = TRUE, ncol = 2)
b <- rep(1, 3)
X <- matrix(c(-4, 1, 2, 3, 2, 3, -1, -1, 1), byrow = TRUE, nrow = 3, ncol = 3)
# evaled <- evaluate(A, b, X)
shiftvals <- c(4, -5, -14)
lincongauss::test_update_fix_shift(A, b, .5, 5, shiftvals)
?sample
?sample
?Rcpp::cppFunction
sample_ex <- Rcpp::cppfunction("
Rcpp::sample(3, 1, false);
",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
Rcpp::sample(3, 1, false);
",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
arma::vec probs = arma::ones(3);
Rcpp::sample(3, 1, false, probs, false);
",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
int sample_num() {
arma::vec probs = arma::ones(3);
Rcpp::sample(3, 1, false, probs, false);
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
arma::vec sample_num() {
arma::vec probs = arma::ones(3);
Rcpp::sample(3, 1, false, probs, false);
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
NumericVector sample_num() {
arma::vec probs = arma::ones(3);
Rcpp::sample(3, 1, false, probs, false);
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
int sample_num() {
arma::vec probs = arma::ones(3);
return Rcpp::sample(3, 1, false, probs, false);
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_num() {
arma::vec probs = arma::ones(3);
return Rcpp::sample(3, 1, false, probs, false);
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = Rcpp::RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = "RcppArmadillo")
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo", "RcppArmadilloExtensions"))
sample_ex <- Rcpp::cppFunction("
NumericVector sample_dbl(NumericVector x, int sz, bool rep = false, sugar::probs_t p = R_NilValue)
{
return sample(x, sz, rep, p);
}",
)
sample_ex(1:10, 1)
sample_ex(1:10, 2)
sample_ex(1:10, 3)
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo", "RcppArmadilloExtensions"))
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo"))
sample2 <- Rcpp::cppFunction("
NumericVector sample_int(int n, int sz) {
NumericVector sequence = seq(0, n-1);
return sample(sequence, sz, false, R_NilValue);
}")
sample2 <- Rcpp::cppFunction("
NumericVector sample_int(int n, int sz) {
IntegerVector sequence = seq(0, n-1);
return sample(sequence, sz, false, R_NilValue);
}")
sample_ex <- Rcpp::cppFunction("
NumericVector sample_dbl(NumericVector x, int sz, bool rep = false, sugar::probs_t p = R_NilValue)
{
return sample(x, sz, rep, p);
}",
)
sample_ex <- Rcpp::cppFunction("
NumericVector sample_dbl(IntegerVector x, int sz, bool rep = false, sugar::probs_t p = R_NilValue)
{
return sample(x, sz, rep, p);
}",
)
sample_ex <- Rcpp::cppFunction("
IntegerVector sample_dbl(IntegerVector x, int sz, bool rep = false, sugar::probs_t p = R_NilValue)
{
return sample(x, sz, rep, p);
}",
)
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo"))
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = Rcpp::RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo"))
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size){
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo"))
?Rcpp::cppFunction
sample_ex <- Rcpp::cppFunction("
arma::uvec sample_index(const int &size) {
arma::uvec sequence = arma::linspace<arma::uvec>(0, size-1, size);
arma::uvec out = Rcpp::RcppArmadillo::sample(sequence, size, false);
return out;
}",
depends = c("RcppArmadillo"),
includes = "RcppArmadilloExtensions/sample.h")
sample2 <- Rcpp::cppFunction("
IntegerVector sample_int(int n, int sz) {
IntegerVector sequence = seq(0, n-1);
return sample(sequence, sz, false, R_NilValue);
}")
sampl2(3)
sampl32(3)
sample2(3)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2 <- Rcpp::cppFunction("
int sample_int(int n, int sz) {
IntegerVector sequence = seq(0, n-1);
return sample(sequence, sz, false, R_NilValue)[0];
}")
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)\
sample2(3, 1)\
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 1)
sample2(3, 100)
library(lincongauss)
library(lincongauss)
library(lincongauss)
library(lincongauss)
library(lincongauss)
?tmvtnorm::ptmvnorm
?TruncatedNormal::pmvt
?TruncatedNormal::ptmvnorm
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
browser()
ls()
dir()
q
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
A
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
A
integrate
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
library(lincongauss)
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
library(lincongauss)
ptmvn(0, matrix(1), 0, Inf)
