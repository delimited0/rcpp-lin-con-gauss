foo <- Rcpp::cppFunction("int test() {
sdt::vector<int> data = {1, 2, 3, 4, 5};
return std::lower_bound(data.begin(), data.end(), 3);
}")
foo <- Rcpp::cppFunction("int test() {
std::vector<int> data = {1, 2, 3, 4, 5};
return std::lower_bound(data.begin(), data.end(), 3);
}")
foo <- Rcpp::cppFunction("int test() {
std::vector<int> data = {1, 2, 3, 4, 5};
auto lower = std::lower_bound(data.begin(), data.end(), 3);
return std::distance(data.begin(), lower);
}")
foo
foo()
foo <- Rcpp::cppFunction("int test() {
std::vector<int> data = {1, 2, 4, 5};
auto lower = std::lower_bound(data.begin(), data.end(), 3);
return std::distance(data.begin(), lower);
}")
foo()
func <- Rcpp::cppFunction("arma::mat foo() {
arma::vec theta(6, arma::fill::zeros);
arma::vec a1 = {1, 0, 3};
return a1 * arma::cos(theta);
"})
func <- Rcpp::cppFunction("arma::mat foo() {
arma::vec theta(6, arma::fill::zeros);
arma::vec a1 = {1, 0, 3};
return a1 * arma::cos(theta);
}")
?Rcpp::cppFunction
func <- Rcpp::cppFunction("arma::mat foo() {
arma::vec theta(6, arma::fill::zeros);
arma::vec a1 = {1, 0, 3};
return a1 * arma::cos(theta);
}", depends = "RcppArmadillo")
func()
library(lincongauss)
library(lincongauss)
?switch
error
stop
?stop
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
200 * .85
200 * .85 ( .95)
200 * .85 * .95
220 * .85 * .95
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
reshape_func <- Rcpp::cppFunction("arma::mat baz() {
arma::vec slices = {1, 2, 3, 4. 6, 7};
return arma::reshape(slices, slices.sizes() / 2, 2);
}", depends = "RcppArmadillo")
reshape_func <- Rcpp::cppFunction("arma::mat baz() {
arma::vec slices = {1, 2, 3, 4, 6, 7};
return arma::reshape(slices, slices.sizes() / 2, 2);
}", depends = "RcppArmadillo")
reshape_func <- Rcpp::cppFunction("arma::mat baz() {
arma::vec slices = {1, 2, 3, 4, 6, 7};
return arma::reshape(slices, slices.size() / 2, 2);
}", depends = "RcppArmadillo")
reshape_func()
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
ell_test <- Rcpp::cppFunction(
"arma::mat foo(arma::vec a1, arma::vec a2, arma::vec theta) {
arma::mat result(a1.n_elem, theta.n_elem);
for (int i = 0; i < theta.n_elem; i++) {
result.col(i) = a1 * std::cos(theta(i)) + a2 * std::sin(theta(i));
}
return result;
}", depends = c("RcppArmadillo")
)
A <- matrix(c(1,2,3, 3,4,5, 7,-3,-4), nrow = 3, byrow = TRUE)
b <- rep(1, 3)
a1 <- c(1, 0, 3)
a2 <- c(-3, 1, 0)
ell_test(a1, a2, b)
ell_test(a1, a2, 1)
library(lincongauss)
A <- matrix(c(1,2,3, 3,4,5, 7,-3,-4), nrow = 3, byrow = TRUE)
b <- rep(1, 3)
a1 <- c(1, 0, 3)
a2 <- c(-3, 1, 0)
lincongauss::ellipse_x(a1, a2, theta)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
lincongauss::ellipse_x(a1, a2, theta)
lincongauss::ellipse_x(a1, a2, b)
ell_test(a1, a2, b)
lincongauss::ellipse_x(a1, a2, b)
ell_test(a1, a2, c(a1, a2))
ell_test(a1, a2, c(b, b))
ell_test(a1, a2, b)
lincongauss::ellipse_x(a1, a2, b)
lincongauss::ellipse_x(a1, a2, c(b,b))
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
theta <- lincongauss::intersection_angles(A, b, a1, a2)
library(lincongauss)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
-3.3878 + 2 * pi
library(lincongauss)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
-.1616 + 2 * pi
-3.3878 * pi
-3.3878 + pi
-3.3878 + 2 * pi
library(lincongauss)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
library(lincongauss)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
-.1646 + 2*pi
library(lincongauss)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
lincongauss::ellipse_x(a1, a2, c(b,b))
uitest <- Rcpp::cppFunction("arma::ivec foo() {
arma::uvec v1 = {1, 0, 0, 1};
arma::uvec v2 = {1, 1, 0, 0};
return v1 - v2;
}", depends = c("RcppArmadillo"))
uitest <- Rcpp::cppFunction("arma::ivec foo() {
arma::ivec v1 = {1, 0, 0, 1};
arma::ivec v2 = {1, 1, 0, 0};
return v1 - v2;
}", depends = c("RcppArmadillo"))
uitest()
uitest()
uitest <- Rcpp::cppFunction("arma::ivec foo() {
arma::uvec v1 = {1, 0, 0, 1};
arma::uvec v2 = {1, 1, 0, 0};
return arma::conv_to<ivec>::from(v1) - arma::conv_to<ivec>::from(v2);
}", depends = c("RcppArmadillo"))
uitest <- Rcpp::cppFunction("arma::ivec foo() {
arma::uvec v1 = {1, 0, 0, 1};
arma::uvec v2 = {1, 1, 0, 0};
return arma::conv_to<arma::ivec>::from(v1) - arma::conv_to<arma::ivec>::from(v2);
}", depends = c("RcppArmadillo"))
uitest()
library(lincongauss)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
lincongauss::index_active(A, b, a1, a2, theta, 1)
library(lincongauss)
A <- matrix(c(1,2,3, 3,4,5, 7,-3,-4), nrow = 3, byrow = TRUE)
b <- rep(1, 3)
a1 <- c(1, 0, 3)
a2 <- c(-3, 1, 0)
theta <- lincongauss::intersection_angles(A, b, a1, a2)
theta
lincongauss::index_active(A, b, a1, a2, theta, 1)
library(lincongauss)
theta
lincongauss::index_active(A, b, a1, a2, theta, 1)
library(lincongauss)
lincongauss::ellipse_x(a1, a2, c(b,b))
lincongauss::ellipse_x(a1, a2, theta+1)
ell_thet_1 <- lincongauss::ellipse_x(a1, a2, theta+1)
lincongauss::integration_domain(A, b, ell_thet_1, TRUE)
library(lincongauss)
ell_thet_1 <- lincongauss::ellipse_x(a1, a2, theta+1)
lincongauss::integration_domain(A, b, ell_thet_1, TRUE)
library(lincongauss)
lincongauss::integration_domain(A, b, ell_thet_1, TRUE)
Rcpp::sourceCpp('src/linear_constraints.cpp')
library(lincongauss)
library(lincongauss)
lincongauss::integration_domain(A, b, ell_thet_1, TRUE)
signtest <- Rcpp::cppFunction("arma::ivec foo() {
arma::uvec v1 = {1, 0, 0, 1};
arma::uvec v2 = {1, 1, 0, 0};
return v1 - v2;
}", depends = "RcppArmadillo")
library(lincongauss)
lincongauss::index_active(A, b, a1, a2, theta, 1)
lincongauss::integration_domain(A, b, ell_thet_1, TRUE)
