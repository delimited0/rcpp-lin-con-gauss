foo <- Rcpp::cppFunction("int test() {
sdt::vector<int> data = {1, 2, 3, 4, 5};
return std::lower_bound(data.begin(), data.end(), 3);
}")
foo <- Rcpp::cppFunction("int test() {
std::vector<int> data = {1, 2, 3, 4, 5};
return std::lower_bound(data.begin(), data.end(), 3);
}")
foo <- Rcpp::cppFunction("int test() {
std::vector<int> data = {1, 2, 3, 4, 5};
auto lower = std::lower_bound(data.begin(), data.end(), 3);
return std::distance(data.begin(), lower);
}")
foo
foo()
foo <- Rcpp::cppFunction("int test() {
std::vector<int> data = {1, 2, 4, 5};
auto lower = std::lower_bound(data.begin(), data.end(), 3);
return std::distance(data.begin(), lower);
}")
foo()
func <- Rcpp::cppFunction("arma::mat foo() {
arma::vec theta(6, arma::fill::zeros);
arma::vec a1 = {1, 0, 3};
return a1 * arma::cos(theta);
"})
func <- Rcpp::cppFunction("arma::mat foo() {
arma::vec theta(6, arma::fill::zeros);
arma::vec a1 = {1, 0, 3};
return a1 * arma::cos(theta);
}")
?Rcpp::cppFunction
func <- Rcpp::cppFunction("arma::mat foo() {
arma::vec theta(6, arma::fill::zeros);
arma::vec a1 = {1, 0, 3};
return a1 * arma::cos(theta);
}", depends = "RcppArmadillo")
func()
library(lincongauss)
library(lincongauss)
?switch
error
stop
?stop
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
200 * .85
200 * .85 ( .95)
200 * .85 * .95
220 * .85 * .95
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
library(lincongauss)
foo <- lincongauss::rtmvn(1000, 0, 1, -1, 1, 0)
reshape_func <- Rcpp::cppFunction("arma::mat baz() {
arma::vec slices = {1, 2, 3, 4. 6, 7};
return arma::reshape(slices, slices.sizes() / 2, 2);
}", depends = "RcppArmadillo")
reshape_func <- Rcpp::cppFunction("arma::mat baz() {
arma::vec slices = {1, 2, 3, 4, 6, 7};
return arma::reshape(slices, slices.sizes() / 2, 2);
}", depends = "RcppArmadillo")
reshape_func <- Rcpp::cppFunction("arma::mat baz() {
arma::vec slices = {1, 2, 3, 4, 6, 7};
return arma::reshape(slices, slices.size() / 2, 2);
}", depends = "RcppArmadillo")
reshape_func()
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
library(lincongauss)
mu <- c(0, 0)
Sigma <- diag(2)
lb <- c(0, 0)
ub <- c(1, 1)
baz <- lincongauss::rtmvn(1000, mu, Sigma, lb, ub, c(.5, .5))
