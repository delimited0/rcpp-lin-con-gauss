#ifndef TWOSIDEDBARRIER_H
#define TWOSIDEDBARRIER_H

#include "util.h"
#include <utility>

class TwoSidedBarrier {
public:
  arma::uvec group;
  arma::vec ub;
  arma::vec lb;
  arma::vec ub_org;
  arma::vec lb_org;
  arma::uvec ui;
  arma::uvec li; 
  arma::uvec fi;
  arma::uvec enabled;
  arma::vec extra_hessian;
  arma::vec center;
  arma::vec mu;
  arma::mat Prec;
  int d;
  double bt;
  
  TwoSidedBarrier(arma::vec mu, arma::mat Prec, arma::vec lb, arma::vec ub,
                  double bt) : 
    mu(mu), Prec(Prec), lb(lb), ub(ub), ub_org(ub), lb_org(lb), bt(bt) {
    d = lb.size();
    
    group = arma::regspace<arma::uvec>(0, d-1);
    ui = arma::find(lb == -arma::datum::inf);
    li = arma::find(ub == arma::datum::inf);
    fi = arma::find((lb == -arma::datum::inf) && 
                    (ub == arma::datum::inf));
    enabled = arma::ones<arma::uvec>(d);
    extra_hessian = arma::zeros<arma::vec>(d);
    center = (ub + lb) / 2;
    center(li) = lb(li) + 1e6;
    center(ui) = ub(ui) - 1e6;
    center(fi).zeros();
  }
  
  void set_extra_hessian(arma::vec extra_hessian);
  bool feasible(arma::vec x);
  double stepsize(arma::vec x, arma::vec v);
  std::pair<arma::sp_mat, arma::vec> boundary(arma::vec x);
  void disable_variables(arma::uvec group_ids);
  double density(arma::vec x);
  arma::vec gradient(arma::vec x);
  arma::vec hessian_internal(arma::vec x);
  arma::vec tensor_internal(arma::vec x);
  arma::sp_mat hessian(arma::vec x);
  arma::sp_mat hessian_inv(arma::vec x);
  arma::sp_mat sqrt_hessian(arma::vec x);
  arma::sp_mat sqrt_hessian_inv(arma::vec x);
  arma::vec quadratic_form_gradient(arma::vec x, arma::mat u);
  arma::vec log_det_gradient(arma::vec x);
  arma::vec rep_vector(arma::vec v);
  arma::vec gradient_norm(arma::vec x);
  arma::vec hessian_norm(arma::vec x, arma::vec v);
};

struct ACOpts {
  int max_iter = 300;
  double dual_tol = 1e-12;
  double gaussian_term = 1e-12;
  int regularizer_step = 10;
  bool detect_tight_constraints = true;
  double distance_tol = 1e-6;
  double velocity_tol = 1e-1;
  double distance_tol2 = 1e-9;
};

arma::vec analytic_center(TwoSidedBarrier f, ACOpts opts);

#endif